[ ] Query.TableAliasMap: User -> u. if u present try us etc
[o] better connection pool
[x]   thread safe
[x]   wait if connection pool is empty or create new connections? wait.
[ ]   close connection after a number of recycles and create a new one
[ ] removing referenced DbObject. check and possibly fail or update to null? DbClass.List<RelRef>
[o] Index(DbField...)
[x]    Collation asc (default)
[ ]    Collation desc
[o] Query(IndexFt,String)
[x]   IN BOOLEAN MODE (default)
[ ]   IN NATURAL LANGUAGE MODE
[ ]   IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION
[ ]   WITH QUERY EXPANSION
[ ] check RelRef.set(id) vs RelRef.set(DbObject) check type? requires get() for id. still not safe. maybe when Db.mode_safe_ref_set=true
[ ] class OID instead of integer
[ ] FldString check string length vs field length at set? DbField.getSize()?
[ ] Db.tableNameForJavaClass does not include package name
[ ] Db.instance().makeConsistent() deleting RefN orphans, setting null on missing Ref etc 
[ ] Db.instance().delete(Index) Db.instance().create(Index) for faster imports?
[ ] FldFloat max from Float.MAX_VALUE can not be committed
[ ] FldTimestamp mysql min '1970-01-01 00:00:01' cannot be committed 
[ ] inheritance
[ ]   example: select t1.* from File where t1.clspth like 'aaabbb%'; selects all objects that are File or inherits from File given File clspth=aaabbb
[ ] refactor commands. example: rename main.User main.Person, rename main.User.name fullName, delete main.User.hashCode etc
[ ] cluster
[ ]   connections to multiple servers
[ ]   write to all
[ ]   read round robin
[o] drivers for other (open source) rdbms. see https://www.databasestar.com/sql-data-types/
[x]   mysql
[ ]   sqlite
[ ]   postgresql
[ ]   oracle?
[ ]   ms sql server?
[ ]   ibm db2?

[x] delete
[x]    cascade
[x] transaction.get
[x] condition
[x]   join // select t2.* from User as t1,File as t2 where t1.id=t2.User_files;
[x]   AggN
[x]   RefN
[x]   Ref
[x]   Agg
[x] order
[x]   table ref
[x] limit
[x] cache
[x]   DbTransaction.cache_enabled
[x] blob field
[x]   mysql hex
[x] clob field LONGTEXT
[x] full text search
[x]   IndexFullText(DbField...)
[x] bool field
[x] float field
[x]   set 1.2f then query 1.2f does not work. see 
         https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html
         https://dev.mysql.com/doc/refman/8.0/en/problems-with-float.html
[x] double field
[x] indexes
[x]   RefN
[x]   AggN
[x] Query.LIKE
[x] check string lengths when setting varchar fields? resolved: generates sql exception in driver
[x] RefN remove object
[x] AggN delete object
[x] Agg delete object
[x] Ref remove object
[x] AggN get
[x] import test data from csv
[x] create table: innodb utf8. resolved: utf8mb4 is better. specified by sysadm when creating database
[x] csv reader
[x] larger sample data
[x] more escapes for string in FldString, FldClob, Query
[x] RefN get
[x] profiling
[x]   create
[x]   get
[x]   delete
[x] orphan RefN fix Map<Class,List<MetaRelRefN>> in Db, delete from <relRefTable> where <toId>=<deletedObjectId>
[x]   impl instead: dbclass.referingRefN, dbobject.deleteFromDb() etc
[x]   test case
[x] DbTransaction.getCount(Query):int does select count(t1.*) from <class> t1 where <query>
[x]   AggN
[x]   RefN
[x] test cases
[o] framework
[x]   create
[x]   get
[x]     no query
[x]     query
[x]       fulltext
[x]   update
[x]   delete
[x]   min,max values
[x] better connection pool
[x]   thread safe
[x]   wait if connection pool is empty or create new connections? wait.
[x] foreign key? implemented in Db.
[x]   cascade delete? recursively get() and delete
[x]     if aggregated does not have any Agg,AggN,RefN then cascade delete with "delete from ... where ..."
[x] boiler plate java code generator Util.createJavaCode(PrintWriter out, Class cls). see package gem
[x]   fields
[x]     FldString
[x]     FldInt
[x]     FldLong
[x]     FldFloat
[x]     FldDouble
[x]     FldTimestamp
[x]     FldBoolean
[x]     FldBlob
[x]     FldClob
[x]   relations
[x]     RelAgg
[x]     RelAggN
[x]     RelRef
[x]     RelRefN
[x] ?	@SuppressWarnings({ "unchecked", "rawtypes" })// ? ugly vs comfort. ugly for comfort.
		public List<File> getFiles(final Query qry, final Order ord, final Limit lmt) {
			return (List<File>) (List) files.get(this, qry, ord, lmt);
		} 
[x] see main.TestObj custom DbField. better pattern.
[x]   setTemp(DbField f,String s, Object v), getTemp(DbField f,String s), hasTemp(DbField f,String s) naming, error prone pattern, ugly.
[x]   DbObject.set(DbField,Object,boolean) boolean true if field should be considered dirty. set false if data was transformed just in time and cached.
[x] check indexes
[x]   drop and recreate index if mismatch
[x]   drop undeclared indexes. boolean setting Db.drop_undeclared_indexes
[x] check columns to match fields order and type
[x]   add new column: alter table <tableName> add <columnName columnDef>
[x]   if columns order do not match fields see: https://stackoverflow.com/questions/2934312/how-to-rearrange-mysql-columns
[x]     better algorithm. good enough. readable
[x]   if column type has changed: ALTER TABLE table_name MODIFY COLUMN column_name datatype
[x]     check size. DbField.size is not 0 for relevant types e.g. varchar, char
[x]     check default values
[x]     check is nullable
[x]   drop undefined columns. boolean setting Db.drop_undefined_columns
[x] id field to bigint? 2 billion records should be enough
[x] timestamp field
[x]   FldTs range of min=1970-01-01 01:00:01.0 and max=2038-01-19 04:14:07 too limited?
[x]   FldTs using java.sql type. ok?
[x]   main.FldDateTime supports range 0001-01-01 00:00:00 to 9999-12-31 23:59:59
[x]     FldDt in package db. get/set java.sql.Timestamp
