module db {
	requires java.sql;
}

create user c@localhost identified by 'password';
	mysql -u c -p
	
select user from mysql.user;
	drop user c@localhost;

CREATE DATABASE testdb CHARACTER SET utf8 COLLATE utf8_bin;
	
grant all on testdb.* to c@localhost;
	revoke all on testdb.* from c@localhost;
	
FLUSH PRIVILEGES;
	SHOW GRANTS FOR c@localhost;
	



SELECT LOAD_FILE('/home/c/Downloads/test.sql');


# the path that can be accessed by LOAD_FILE
select @@GLOBAL.secure_file_priv;
show variables like 'secure_file_priv';
select @@secure_file_priv;

SELECT LOAD_FILE('/var/lib/mysql-files/test.sql');
insert into blobs values( LOAD_FILE('/var/lib/mysql-files/test.sql'));

show variables like 'max_allowed_packet';
mysql --max_allowed_packet=32M
SET GLOBAL max_allowed_packet=524288000;

# config
[mysqld]
max_allowed_packet=128M


# display table columns
desc File;
SHOW FULL COLUMNS FROM File;

create table Data (id int auto_increment primary key, data longblob);
insert into Data (data) values (0x19c0300dc90e7cedf64703ed8ae8683b);
insert into Data values (null,0x19c0300dc90e7cedf64703ed8ae8683c);
insert into Data values (0,0x19c0300dc90e7cedf64703ed8ae8683c);
insert into Data values ();
update Data set data=0x19c0300dc90e7cedf64703ed8ae8683d where id=6;

insert into Data values(null, LOAD_FILE('/var/lib/mysql-files/test.mp3'));

show indexes from File;
create index User_files on File(User_files);
alter table File drop index User_files;

show create table User;

create index User_refFiles on User_refFiles(User);

drop table User;drop table File;drop table Data;drop table User_refFiles;



explain select t3.* from User as t1, File as t3, User_refFiles as t2 where t1.id=1 and t1.id=t2.User and t2.File=t3.id order by t3.created_ts desc;

explain select t2.* from User as t1, File as t2 where t1.id=1 and t1.id=t2.User_files order by t2.created_ts desc;
create index User_files on File(User_files);

explain select t3.* from User as t1, File as t3, User_refFiles as t2 where t1.id=1 and t1.id=t2.User and t2.File=t3.id and t3.name like 'user file %';

create index name on File (name);


drop table User;drop table File;drop table DataBinary;drop table DataText;drop table User_refFiles;drop table Book;





public class SQLInjectionEscaper {

    public static String escapeString(String x, boolean escapeDoubleQuotes) {
        StringBuilder sBuilder = new StringBuilder(x.length() * 11/10);

        int stringLength = x.length();

        for (int i = 0; i < stringLength; ++i) {
            char c = x.charAt(i);

            switch (c) {
            case 0: /* Must be escaped for 'mysql' */
                sBuilder.append('\\');
                sBuilder.append('0');

                break;

            case '\n': /* Must be escaped for logs */
                sBuilder.append('\\');
                sBuilder.append('n');

                break;

            case '\r':
                sBuilder.append('\\');
                sBuilder.append('r');

                break;

            case '\\':
                sBuilder.append('\\');
                sBuilder.append('\\');

                break;

            case '\'':
                sBuilder.append('\\');
                sBuilder.append('\'');

                break;

            case '"': /* Better safe than sorry */
                if (escapeDoubleQuotes) {
                    sBuilder.append('\\');
                }

                sBuilder.append('"');

                break;

            case '\032': /* This gives problems on Win32 */
                sBuilder.append('\\');
                sBuilder.append('Z');

                break;

            case '\u00a5':
            case '\u20a9':
                // escape characters interpreted as backslash by mysql
                // fall through

            default:
                sBuilder.append(c);
            }
        }
   }

public String MysqlRealScapeString(String str){
  String data = null;
  if (str != null && str.length() > 0) {
    str = str.replace("\\", "\\\\");
    str = str.replace("'", "\\'");
    str = str.replace("\0", "\\0");
    str = str.replace("\n", "\\n");
    str = str.replace("\r", "\\r");
    str = str.replace("\"", "\\\"");
    str = str.replace("\\x1a", "\\Z");
    data = str;
  }
  return data;
}

# print a line in file
sed -n 41215p < books_data.csv
awk 'NR==5' file
head -n $line file | tail -1


explain select count(*) from Book, DataText where Book.data=DataText.id;

select * from Book limit 0,1 into outfile "sqlres.txt";


